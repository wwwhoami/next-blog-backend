generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URL")
  extensions = [pg_trgm, btree_gist]
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique @db.VarChar
  name         String         @unique @db.VarChar
  password     String         @db.Char(60)
  image        String?        @db.VarChar
  role         Role           @default(USER)
  posts        Post[]
  Comment      Comment[]
  PostLikes    PostLikes[]
  CommentLikes CommentLikes[]
  followers    Follows[]      @relation("follower")
  following    Follows[]      @relation("following")
}

model Follows {
  followerId  String @map("follower_id") @db.Uuid
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String @map("following_id") @db.Uuid
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Post {
  id         Int              @id @default(autoincrement())
  title      String           @unique @db.VarChar
  content    String
  published  Boolean          @default(false)
  coverImage String           @map("cover_image")
  authorId   String           @map("author_id") @db.Uuid
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  excerpt    String           @db.VarChar
  slug       String           @unique @db.VarChar
  likesCount Int              @default(0) @map("likes_count")
  author     User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories PostToCategory[]
  comment    Comment[]
  PostLikes  PostLikes[]

  @@index([title(ops: raw("gist_trgm_ops")), excerpt(ops: raw("gist_trgm_ops"))], type: Gist)
  @@index([slug])
  @@index([createdAt])
  @@index([published])
}

model PostToCategory {
  postId       Int      @map("post_id")
  categoryName String   @map("category_name")
  category     Category @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryName])
}

model Category {
  name           String           @id @unique @db.VarChar
  description    String           @db.VarChar(350)
  hexColor       String?          @unique @map("hex_color") @db.Char(7)
  PostToCategory PostToCategory[]
}

model Comment {
  id           Int            @id @default(autoincrement())
  authorId     String?        @map("author_id") @db.Uuid
  postId       Int            @map("post_id")
  ancestorId   Int?           @map("ancestor_id")
  content      String
  isDeleted    Boolean        @default(false) @map("is_deleted")
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  likesCount   Int            @default(0) @map("likes_count")
  author       User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  ancestor     Comment?       @relation("ancestor_descendants", fields: [ancestorId], references: [id])
  descendants  Comment[]      @relation("ancestor_descendants")
  CommentLikes CommentLikes[]
}

model PostLikes {
  postId Int    @map("post_id")
  userId String @map("user_id") @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model CommentLikes {
  commentId Int     @map("comment_id")
  userId    String  @map("user_id") @db.Uuid
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}

enum NotificationType {
  COMMENT_CREATE
  COMMENT_LIKE
  COMMENT_UNLIKE
  POST_LIKE
  POST_UNLIKE
}

model Notification {
  id        Int              @id @default(autoincrement())
  actor     String           @db.Uuid
  target    String           @db.Uuid
  type      NotificationType
  data      Json             @db.JsonB
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([isRead])
  @@index([createdAt])
  @@index([target])
}
