name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-unit:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install Dependencies
      run: yarn install

    - name: Create and populate .env file
      env:
        ACCESS_JWT_SECRET: ${{ secrets.ACCESS_JWT_SECRET }}
        ACCESS_JWT_EXPIRATION: ${{ secrets.ACCESS_JWT_EXPIRATION }}
        REFRESH_JWT_SECRET: ${{ secrets.REFRESH_JWT_SECRET }}
        REFRESH_JWT_EXPIRATION: ${{ secrets.REFRESH_JWT_EXPIRATION }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        KAFKA_BROKER_ID: ${{ secrets.KAFKA_BROKER_ID }}
        KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
        KAFKA_PORT: ${{ secrets.KAFKA_PORT }}
        ZOOKEEPER_PORT: ${{ secrets.ZOOKEEPER_PORT }}
        KAFKA_HOST_INTERNAL: ${{ secrets.KAFKA_PORT_INTERNAL }}
        KAFKA_PORT_INTERNAL: ${{ secrets.KAFKA_PORT_INTERNAL }}
        KAFKA_HOST_EXTERNAL: ${{ secrets.KAFKA_HOST }}
        KAFKA_PORT_EXTERNAL: ${{ secrets.KAFKA_PORT }}
      run: |
        touch .env
        echo ACCESS_JWT_SECRET="$ACCESS_JWT_SECRET" >> .env
        echo ACCESS_JWT_EXPIRATION=$ACCESS_JWT_EXPIRATION >> .env
        echo REFRESH_JWT_SECRET="$REFRESH_JWT_SECRET" >> .env
        echo REFRESH_JWT_EXPIRATION=$REFRESH_JWT_EXPIRATION >> .env
        echo POSTGRES_DB="$POSTGRES_DB" >> .env
        echo POSTGRES_USER="$POSTGRES_USER" >> .env
        echo POSTGRES_PASSWORD="$POSTGRES_PASSWORD" >> .env
        echo POSTGRES_HOST="$POSTGRES_HOST" >> .env
        echo POSTGRES_PORT=$POSTGRES_PORT >> .env
        echo POSTGRES_URL=$POSTGRES_URL >> .env
        echo REDIS_HOST="$REDIS_HOST" >> .env
        echo REDIS_PORT=$REDIS_PORT >> .env
        echo REDIS_PASSWORD="$REDIS_PASSWORD" >> .env
        echo KAFKA_BROKER_ID=$KAFKA_BROKER_ID >> .env
        echo KAFKA_HOST=$KAFKA_HOST >> .env
        echo KAFKA_PORT=$KAFKA_PORT >> .env
        echo ZOOKEEPER_PORT=$ZOOKEEPER_PORT >> .env
        echo KAFKA_HOST_INTERNAL=$KAFKA_HOST_INTERNAL >> .env
        echo KAFKA_PORT_INTERNAL=$KAFKA_PORT_INTERNAL >> .env
        echo KAFKA_HOST_EXTERNAL=$KAFKA_HOST_EXTERNAL >> .env
        echo KAFKA_PORT_EXTERNAL=$KAFKA_PORT_EXTERNAL >> .env
      
    - name: Run Unit Tests
      run: yarn test

  test-e2e-notification-app:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install Dependencies
      run: yarn install 
    
    - name: Create and populate .env file
      env:
        ACCESS_JWT_SECRET: ${{ secrets.ACCESS_JWT_SECRET }}
        ACCESS_JWT_EXPIRATION: ${{ secrets.ACCESS_JWT_EXPIRATION }}
        REFRESH_JWT_SECRET: ${{ secrets.REFRESH_JWT_SECRET }}
        REFRESH_JWT_EXPIRATION: ${{ secrets.REFRESH_JWT_EXPIRATION }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        KAFKA_BROKER_ID: ${{ secrets.KAFKA_BROKER_ID }}
        KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
        KAFKA_PORT: ${{ secrets.KAFKA_PORT }}
        ZOOKEEPER_PORT: ${{ secrets.ZOOKEEPER_PORT }}
        KAFKA_HOST_INTERNAL: ${{ secrets.KAFKA_PORT_INTERNAL }}
        KAFKA_PORT_INTERNAL: ${{ secrets.KAFKA_PORT_INTERNAL }}
        KAFKA_HOST_EXTERNAL: ${{ secrets.KAFKA_HOST }}
        KAFKA_PORT_EXTERNAL: ${{ secrets.KAFKA_PORT }}
      run: |
        touch .env
        echo ACCESS_JWT_SECRET="$ACCESS_JWT_SECRET" >> .env
        echo ACCESS_JWT_EXPIRATION=$ACCESS_JWT_EXPIRATION >> .env
        echo REFRESH_JWT_SECRET="$REFRESH_JWT_SECRET" >> .env
        echo REFRESH_JWT_EXPIRATION=$REFRESH_JWT_EXPIRATION >> .env
        echo POSTGRES_DB="$POSTGRES_DB" >> .env
        echo POSTGRES_USER="$POSTGRES_USER" >> .env
        echo POSTGRES_PASSWORD="$POSTGRES_PASSWORD" >> .env
        echo POSTGRES_HOST="$POSTGRES_HOST" >> .env
        echo POSTGRES_PORT=$POSTGRES_PORT >> .env
        echo POSTGRES_URL=$POSTGRES_URL >> .env
        echo REDIS_HOST="$REDIS_HOST" >> .env
        echo REDIS_PORT=$REDIS_PORT >> .env
        echo REDIS_PASSWORD="$REDIS_PASSWORD" >> .env
        echo KAFKA_BROKER_ID=$KAFKA_BROKER_ID >> .env
        echo KAFKA_HOST=$KAFKA_HOST >> .env
        echo KAFKA_PORT=$KAFKA_PORT >> .env
        echo ZOOKEEPER_PORT=$ZOOKEEPER_PORT >> .env
        echo KAFKA_HOST_INTERNAL=$KAFKA_HOST_INTERNAL >> .env
        echo KAFKA_PORT_INTERNAL=$KAFKA_PORT_INTERNAL >> .env
        echo KAFKA_HOST_EXTERNAL=$KAFKA_HOST_EXTERNAL >> .env
        echo KAFKA_PORT_EXTERNAL=$KAFKA_PORT_EXTERNAL >> .env
      
    - name: Build Docker Containers
      run: docker-compose --env-file .env -f "docker-compose-local.yml" up -d --build
      
    - name: Sleep for 60 seconds
      run: sleep 60s
      shell: bash
      
    - name: Create Kafka topics
      run: |
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic get_notifications --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic mark_as_read --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic post_unlike --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic post_like --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic comment_unlike --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic comment_like --create --if-not-exists
        docker exec -t next-blog-kafka /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${{ secrets.KAFKA_HOST }}:${{ secrets.KAFKA_PORT }} --topic comment_create --create --if-not-exists

    - name: Sleep for 60 seconds
      run: sleep 60s
      shell: bash
        
    - name: Run E2E Tests on notification-app
      run: yarn test:e2e:notification-app
      
    - name: Stop Containers
      if: always()
      run: docker-compose -f "docker-compose-local.yml" down
